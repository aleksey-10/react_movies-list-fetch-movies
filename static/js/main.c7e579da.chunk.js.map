{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api/api.ts","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","FindMovie","isMovieFound","requestMovie","preview","isLoading","addMovie","useForm","register","errors","reset","onSubmit","handleSubmit","trim","isError","htmlFor","type","id","placeholder","ref","required","pattern","name","onClick","disabled","Preview","fetchMovie","a","fetch","response","data","json","App","useState","setMovies","setIsMovieFound","setIsLoading","setPreview","dataFromApi","Response","Title","Plot","Poster","imdbID","every","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7e579da.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map((movie) => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { MovieI } from '../../interfaces/MovieI';\n\ntype FormData = {\n  title: string;\n};\n\ntype FindMovieProps = {\n  isMovieFound: boolean;\n  requestMovie(title: string): void;\n  preview: MovieI | null;\n  isLoading: boolean;\n  addMovie(): void;\n};\n\nexport const FindMovie: React.FC<FindMovieProps> = ({\n  isMovieFound,\n  requestMovie,\n  preview,\n  isLoading,\n  addMovie,\n}) => {\n  const {\n    register,\n    errors,\n    reset,\n    handleSubmit,\n  } = useForm<FormData>();\n\n  const onSubmit = handleSubmit(({ title }) => {\n    requestMovie(title.trim());\n  });\n\n  const handleClick = () => {\n    addMovie();\n    reset();\n  };\n\n  const isError = !isMovieFound || errors.title;\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={onSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={`input ${isError && 'is-danger'}`}\n              ref={register({\n                required: true,\n                pattern: /\\w+/,\n              })}\n              name=\"title\"\n            />\n          </div>\n          {\n            errors.title && errors.title.type === 'required' && (\n              <p className=\"help is-danger\">\n                You entered empty field\n              </p>\n            )\n          }\n          {\n            !errors.title && !isMovieFound && (\n              <p className=\"help is-danger\">\n                Can&apos;t find a movie with such a title\n              </p>\n            )\n          }\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-light\"\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={handleClick}\n              disabled={preview === null}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        <Preview isLoading={isLoading} preview={preview} />\n      </div>\n    </>\n  );\n};\n\ntype PreviewProps = {\n  isLoading: boolean;\n  preview: MovieI | null;\n};\n\nconst Preview: React.FC<PreviewProps> = ({ isLoading, preview }) => {\n  if (isLoading) {\n    return <span>Loading...</span>;\n  }\n\n  if (preview === null) {\n    return <span>Your matches display here.</span>;\n  }\n\n  return <MovieCard {...preview} />;\n};\n","export const fetchMovie = async (title: string) => {\n  const response = await fetch(`http://www.omdbapi.com/?apikey=678cb8a2&t=${title}`);\n  const data = response.json();\n\n  return data;\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\nimport { MovieI } from './interfaces/MovieI';\nimport { fetchMovie } from './api/api';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<MovieI[]>([...data]);\n  const [isMovieFound, setIsMovieFound] = useState<boolean>(true);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [preview, setPreview] = useState<MovieI | null>(null);\n\n  const requestMovie = async (title: string) => {\n    setIsLoading(true);\n    const dataFromApi = await fetchMovie(title);\n\n    setIsLoading(false);\n\n    if (dataFromApi.Response === 'False') {\n      setIsMovieFound(false);\n    } else {\n      setPreview({\n        title: dataFromApi.Title,\n        description: dataFromApi.Plot,\n        imgUrl: dataFromApi.Poster,\n        imdbUrl: `https://www.imdb.com/title/${dataFromApi.imdbID}`,\n        imdbId: dataFromApi.imdbID,\n      });\n    }\n  };\n\n  const addMovie = () => {\n    if (preview !== null && movies.every(movie => movie.imdbId !== preview.imdbId)) {\n      setMovies([\n        ...movies,\n        {\n          ...preview,\n        },\n      ]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          isMovieFound={isMovieFound}\n          requestMovie={requestMovie}\n          preview={preview}\n          isLoading={isLoading}\n          addMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}